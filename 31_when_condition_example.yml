---
- hosts: localhost
  tasks:
    - name: Run with item greater than 5
      command: echo "{{ item }}"
      loop: [0, 2, 3, 4, 5, 6, 7, 9]
      when: item > 5
      
    - name: Start apache2 service
      service:
        name: httpd
        state: started
      register: service_status
      ignore_errors: true
      
    - name: Fail with custom message if httpd service failed to start
      fail:
        msg: "Failed to start httpd service, check httpd service status and review logs"
      when: service_status.failed
      
---
- name: Start http if postfix active
  hosts: centosstream7
  tasks:
    - name: Check postfix status
      command: /usr/bin/systemctl is-active postfix
      ignore_errors: true
      register: result

    - name: Start httpd if postfix is activity
      service:
        name: httpd
        state: restarted
      when: result.rc == 0

---
- name: Validation for file existance
  hosts: localhost
  become: true

  vars:
     myfile: /tmp/validate.txt

  tasks:
    - name: Check if file exists
      ansible.builtin.stat:
        path: "{{ myfile }}"
      register: file_data

    - name: Print if file exists
      ansible.builtin.debug:
        msg: "{{ myfile }} file is exists"
      when: file_data.stat.exists

    - name: Print if file doesn't exists
      ansible.builtin.debug:
        msg: "{{ myfile }} file doesn't exist"
      when: not file_data.stat.exists
      
---
- name: Validate directory status using stat module
  hosts: localhost
  vars:
    dir_name: /tmp/muralip

  tasks:
    - name: Validate if {{ dir_name }} exist
      ansible.builtin.stat:
        path: "{{ dir_name }}"
      register: dir_status

    - name: The {{ dir_name }} is exists
      ansible.builtin.debug:
        msg: "The {{ dir_name }} does exists"
      when: dir_status.stat.isdir is defined and dir_status.stat.isdir

    - name: The {{ dir_name }} doesn't exists
      ansible.builtin.debug:
        msg: "The {{ dir_name }} doesn't exist"
      when: dir_status.stat.isdir is not defined

---
- name: Checking contents of a directory
  hosts: localhost
  become: true
  vars:
    mydir: /root/backup

  tasks:
    - name: Checking contents of "{{ mydir }}"
      ansible.builtin.shell: ls -l {{ mydir }}
      register: backup_content

    - name: Directory "{{ mydir }}" is empty
      ansible.builtin.debug:
        msg: "The {{ mydir }} is empty"
      when: backup_content.stdout == "total 0"

    - name: Directory "{{ mydir }}" contains below files and folders
      ansible.builtin.debug:
        msg: "{{ backup_content.stdout.split('\n') }}"
      when: backup_content.stdout != "total 0"

---
- name: When condition demo
  hosts: localhost

  tasks:
    - name: Fetching uptime details
      ansible.builtin.shell: uptime
      register: uptime_output

    - name: Printing debug message
      ansible.builtin.debug:
        msg: "{{ uptime_output.stdout }}"
      when: ansible_distribution == "CentOS"
---
- name: Conditional statement
  hosts: localhost
  gather_facts: False

  vars:
    x: 4
    y: 78
    z: [1, 4, 89, 100]

  tasks:
    - name: Check if x == y ?
      debug:
        msg: "{{x}} is equal to {{y}}"
      when: x==y

    - name: Check if x is in z
      debug:
        msg: "x is in z: {{x}} is in {{z}}"
      when: x in z


---
- name: Install a package
  hosts: localhost

  vars:
    my_task: true
    my_service: postfix
    distributions:
      - RedHat
      - CentOS
      - Fedora

  tasks:
    - name: Install postfix package on the host
      yum:
        name: postfix
        state: present
      when: my_task
      
    - name: Installing {{ my_service }} package
      yum:
        name: "{{ my_service }}"
        state: latest
      when: my_service is defined

    - name: Install req packages for centos7
      yum:
        name: httpd
        state: latest
      when: >
              ansible_distribution == "CentOS" and ansible_distribution_major_version == "7" or
              ansible_distribution == "Fedora" and ansible_distribution_major_version == "28"
    - name: Create a file under /tmp
      file:
        path: /tmp/memstatfile
        state: touch
        mode: '0755'
      when: "ansible_memfree_mb > 1000"
      
    - name: Postfix package installation
      yum:
        name: postfix
        state: latest
      when: ansible_distribution in distributions

    - name: Install postfix if /root FS size has enough space
      yum:
        name: postfix
        state: latest
      loop: "{{ ansible_mounts }}"
      when: item.mount == "/" and item.size_available > 100000000

    - name: Check postfix status
      command: /usr/bin/systemctl is-active postfix
      ignore_errors: true
      register: result

    - name: Start httpd if postfix is activity
      service:
        name: httpd
        state: restarted
      when: result.rc == 0
      
   - name: List out /home
      command: "ls /home"
      register: home_out

    - name: Fail with message
      fail:
        msg: "Failed because rc is 0"
      when: home_out.rc == 0
---
- name: "Rocky Linux 9 - CVE-2024-6387: regreSSHion"
  hosts: all
  become: true
  
  tasks:
    - name: check if openssh is installed
      shell: "rpm -q openssh"
      register: openssh_installed
      failed_when: false
      
    - name: Upgrade openssh
      dnf:
        name:
          - openssh
          - openssh-clients
          - openssh-server
        state: present
      when: 
        - ansible_facts.distribution_major_version is version('9', '=')
        - "'web' in group_names"
        - openssh_installed.rc != 0
        
      notify:
        - ssh service restart
  handlers:
    - name: ssh service restart
      service:
        name: sshd
        state: restarted
---
- name: Verify if epel-release is installed
  shell: rpm -q epel-release
  register: epel_installed
  failed_when: false

- name: Epel Repo installation
  block:
    - name: Package installation
      shell: rpm -i --nodigest "{{ epel_repo_url }}"

    - name: restart httpd
      service:
        name: httpd
        state: restarted

  when: epel_installed.rc != 0

---
- name: check if epel-release is installed
  command: "rpm -q --queryformat '%{VERSION}' epel-release"
  register: epel_version
  when: epel_installed.rc == 0

- name: Gpel Repo installation
  block:
    - name: Package installation
      shell: rpm -i --nodigest "{{ gpel_repo_url }}"

    - name: restart httpd
      service:
        name: httpd
        state: restarted

  when: epel_installed.rc == 0 and epel_version.stdout != '97.76.0.13'
    
