---
- name: Fetching bash version dictionary or map examples
  gather_facts: false
  hosts: localhost

  tasks:
    - name: Fetch bash version
      shell: "bash --version"
      register: bash_out

      # - name: Printing bash version
      # debug: var=bash_out["stdout_lines"]
      # debug: var=bash_out.stdout_lines
      # debug: var=bash_out.get("stdout_lines")

    - set_fact:
        bash_version: "{{ bash_out.stdout.split('\n')[0].split(' ')[3] }}"

    - name: Printing bash version
      debug: var=bash_version
---
- name: Generating hypervisor name
  gather_facts: true  # Ensure that ansible facts are gathered
  hosts: localhost

  tasks:
    - name: Set hypervisor variable
      set_fact: 
        hypervisor: "{{ ansible_hostname.split('-')[0] ~ '-' ~ 'xyzf' ~ ansible_hostname.split('-')[2][:3] }}"
    - name: Show the hypervisor name
      debug:
        msg: "The hypervisor name is {{ hypervisor}}"

---
- name: Generating hypervisor name
  gather_facts: true  # Ensure that ansible facts are gathered
  hosts: localhost

  tasks:
    - name: Set hypervisor variable
      set_fact: 
        hypervisor: "{{ ansible_hostname.split('-')[0] ~ '-' ~ 'xyzf' ~ ansible_hostname.split('-')[2][:3] }}"
        node_heat: >
          {%- if 'm' in ansible_hostname %}
            master
          {%- elif 'h' in ansible_hostname %}
            hot
          {%- elif 'c' in ansible_hostname %}
            cold
          {%- endif %}
        node_master: >
          {%- if 'm' in ansible_hostname %}
            true
          {%- elif 'h' in ansible_hostname %}
            false
          {%- elif 'c' in ansible_hostname %}
            false
          {%- endif %}
        jvm_size: >
          {%- if 'm' in ansible_hostname %}
            16g
          {%- elif 'h' in ansible_hostname %}
            30g
          {%- elif 'c' in ansible_hostname %}
            30g
          {%- endif %}        
    - name: Show the hypervisor name
      debug:
        msg: "The hypervisor name is {{ hypervisor}}"
---
- name: Playing with set_facts if else condition to generate hostnames
  hosts: rockylinux9.example1.com, centosstream8.example2.com, centosstream7.example3.com
  tasks:
    - name: Collection of set facts
      set_fact:
        one: "Hello"
        two: "{{ ansible_domain }}"
        three: "{{ ansible_distribution_file_variety[3:6] }}"
        four: "{{ ansible_distribution }}"
        five: "{{ ansible_distribution_major_version }}"
        DC: "{% if ansible_domain == 'example1.com' %}DC1\
             {% elif ansible_domain == 'example2.com' %}DC2\
             {% else %}DC3\
             {% endif %}"

    - name: Displaying set facts one
      debug:
        msg: "{{ one }}"

    - name: Display set fact two
      debug:
        msg: "{{ two }}"

    - name: Display set fact three
      debug:
        msg: "{{ three }}"

    - name: Display set fact four
      debug:
        msg: "{{ four }}"

    - name: Display set fact five
      debug:
        msg: "{{ five }}"

    - name: Display DC name
      debug:
        msg: "Your DC for {{ ansible_hostname }} is {{ DC }}"

    - name: Combine
      debug:
        msg: "{{ one }}-{{ two }}-{{ three }}-{{ four }}{{ five }}-{{ DC }}"

---
- name: Generate Crypt storage key
  hosts: test-server
  become: true
  gather_facts: false
  vars_prompt:
    - name: host_name
      prompt: "Enter the target host name without domain"
      private: false

    - name: target_ip
      prompt: "Enter the target host's IP"
      private: false

  tasks:
    - name: Clean the values
      set_fact:
        target_host: "{{ host_name.split('.')[0] }}"

    - name: verify status of the key
      stat:
        path: /tmp/{{target_host}}/test.txt
      register: key_status

    - name: Fail if key is found
      fail:
        msg: "The key is already present!"
      when: key_status.stat.exists

    - name: New Key generation
      block:
        - name: information of Key generation
          debug:
            msg: " The new key will be generate for the {{target_host}}.erado.net {{target_ip}}"

        - name: Generating Key
          shell: /tmp/test.sh {{target_host}}.domain.com {{target_ip}}
          register: cryptgen

        - name: Key generation output
          debug:
            msg: "{{cryptgen}}"

        - name: sync keys
          shell: /test/script2.sh
          register: keysync

        - name: key sync status
          debug:
            msg: "{{keysync}}"

      when: not key_status.stat.exists


