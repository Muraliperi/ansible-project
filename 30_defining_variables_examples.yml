1. Inside Ansible Playbook File
You can define variables directly within your playbook file.

2. Separate Variable File under ansible playbook location
Create a separate file for variables, e.g., vars.yml:
vi vars.yml
web_package: httpd
web_service: httpd
firewall_package: firewalld
firewall_service: firewalld

Referencing Variable File in Playbook (You can reference this variable file in your playbook using vars_files)
vars_files:
  - vars.yml
OR
Including Variable File in a Task (Alternatively, you can include the variable file within a task)
- name: Include variables
  include_vars: vars.yml

4) Group Variables
Group variables are used to define common configurations for a group of hosts. 
They are typically stored in the group_vars directory within your Ansible project.
Defining Group Variables
You create a YAML file for each group in the group_vars directory. For example, if you have a group called web_servers, db_servers, you would create a file named db_servers.yml:
Hereâ€™s how you can use them:
 # group_vars/web_servers.yml
ntp_server: ntp.example.com
web_port: 80
# group_vars/db_servers.yml
db_host: localhost
db_port: 3306
db_user: admin
db_password: secret
Using Group Variables in Playbooks
- hosts: web_servers
  tasks:
    - name: Ensure NTP is configured
      ansible.builtin.command: ntpdate {{ ntp_server }}
    - name: Ensure web server is running
      ansible.builtin.service:
        name: apache2
        state: started
        port: {{ web_port }}
- hosts: db_servers
  tasks:
    - name: Ensure database is reachable
      ansible.builtin.command: mysql -h {{ db_host }} -P {{ db_port }} -u {{ db_user }} -p{{ db_password }}

5) Variable Precedence
Ansible has a specific order of precedence for variables. Group variables are overridden by host variables, playbook variables, 
and command-line variables 1. Understanding this precedence helps manage conflicts and ensures the correct values are used.

6) Dynamic Group Variables
Dynamic group variables are generated during the execution of a playbook, often based on external data sources or scripts. 
This is useful for environments where configurations change frequently.
Creating Dynamic Group Variables
You can use the set_fact module to create dynamic variables. For example, you might fetch data from an API and set it as a variable:
- hosts: all
  tasks:
    - name: Fetch data from API
      uri:
        url: http://api.example.com/data
        method: GET
        return_content: yes
      register: api_data

    - name: Set dynamic group variable
      set_fact:
        dynamic_var: "{{ api_data.json.some_key }}"
Using Dynamic Group Variables
Once set, these variables can be used like any other variable in your playbooks:
- hosts: all
  tasks:
    - name: Use dynamic variable
      debug:
        msg: "The value of dynamic_var is {{ dynamic_var }}"

7) Advanced Techniques
You can combine dynamic variables with Jinja2 templates for more complex scenarios. For example, you might generate a configuration file based on dynamic data:
- hosts: all
  tasks:
    - name: Generate config file
      template:
        src: config.j2
        dest: /etc/myapp/config.conf
8) Set common defaults in a group_vars/all file. See Organizing host and group variables for details on how to organize host and group variables in your inventory. 
Group variables are generally placed alongside your inventory file, but they can also be returned by dynamic inventory (see Working with dynamic inventory) 
or defined in AWX or on Red Hat Ansible Automation Platform from the UI or API:
---
# file: /etc/ansible/group_vars/all
# this is the site wide default
ntp_server: default-time.example.com
9) If one host used a different NTP server, you could set that in a host_vars file, which would override the group variable:
---
# file: /etc/ansible/host_vars/xyz.boston.example.com
ntp_server: override.example.com
10) Set defaults in roles to avoid undefined-variable errors. If you share your roles, other users can rely on the 
reasonable defaults you added in the roles/x/defaults/main.yml file, or they can easily override those values in inventory or at the command line. See Roles for more info. For example:
---
# file: roles/x/defaults/main.yml
# if no other value is supplied in inventory or as a parameter, this value will be used
http_port: 80
https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#variable-examples
##########################################################################################################################################

[root@ansible-control-node playbooks]# cat /etc/ansible/playbooks/advanced_1/create_variables.yml
---
    a: 5
    b: 6
    c: 8
    pkgs:
      'linux': 'top'
      'aix': 'mop'
      'solaris': 'cop'
    x: ['abc', 5, 7.8, {'name':'ganesh'}]
    y: {'a':5, 'b':'zh', 'c':[2, 5, 6]}
[root@ansible-control-node playbooks]# 
[root@ansible-control-node playbooks]# cat /etc/ansible/playbooks/advanced_1/create_json_variables.yml
{
 "name": "murali",
 "age": 29,
 "department": "IT",
 "properties": ["Trichy", "Bangalore", "Chennai", "Delhi", 2995],
 "owners":
  {
   "own1": "sachin",
   "own2": "shewag",
   "own3": "dhoni"

  },
 "x": "abc",
 "y": "def"

}
[root@ansible-control-node playbooks]#
